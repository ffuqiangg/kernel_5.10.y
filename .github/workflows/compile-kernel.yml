name: Compile Kernel

on:
  repository_dispatch:
    types:
      - compile-kernel
  workflow_dispatch:
    inputs:
      kernel_version:
        description: "Input kernel version"
        required: true
        default: ""
      kernel_auto:
        description: "compile latest kernel"
        required: true
        default: true
        type: boolean

env:
  TZ: America/New_York

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "KERNEL_VERSION=${{ github.event.client_payload.kernel_version }}" >> $GITHUB_ENV
          echo "KERNEL_AUTO=${{ github.event.client_payload.kernel_auto }}" >> $GITHUB_ENV
          if [[ -z ${KERNEL_VERSION} ]]; then
            echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> $GITHUB_ENV
            echo "KERNEL_AUTO=${{ inputs.kernel_auto }}" >> $GITHUB_ENV
          fi
      - name: Compile the kernel
        uses: ophub/amlogic-s9xxx-armbian@main
        with:
          build_target: kernel
          kernel_version: ${KERNEL_VERSION}
          kernel_auto: ${KERNEL_AUTO}
          kernel_package: all
          kernel_sign: -ffuqiangg
          kernel_source: unifreq
          kernel_toolchain: gcc
      - name: Upload Kernel to Release
        uses: ncipollo/release-action@main
        if: env.PACKAGED_STATUS == 'success' && !cancelled()
        with:
          tag: kernel_${PACKAGED_OUTPUTTAGS}
          artifacts: ${PACKAGED_OUTPUTPATH}/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GH_TOKEN }}
      - name: Telegram notification
        run: |
          MSG="✅ 内核编译完成 *${PACKAGED_OUTPUTTAGS}*"
          curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}&parse_mode=MarkDown"
